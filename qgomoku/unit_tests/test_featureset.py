import unittest

import numpy as np

from qgomoku.core.board import Board, BoardTransform, Player, BitBoardCache, BitBoard
from qgomoku.core.game_record import GameRecord
from qgomoku.learner.game_to_features import FeatureSet_v1_1, FeatureBoard_v1_1
from qgomoku.learner.thoughtboard import ThoughtBoard


class TestFeaturesetMethods(unittest.TestCase):
    def test_basic_parsing(self):
        pass
        # sample_gamestring = '{"initial_state": {"size": "9", "win_chain_length": "5", "boardstring": "120000000120000000120000000120000000000000000000000000000000000000000000000000000", "player_to_move": "1"}, "moves": [[4, 0]], "winning_player": 1, "q_assessments": [[-4.045114994049072, 1.0]]}'

        # feature_set = FeatureSet_v1_1(sample_gamestring)
        # self.assertEqual(len(feature_set.get_q()[0]), 8)
        # self.assertEqual(len(feature_set.get_p()[0]), 8)

    def verify_sync(self, board, fboard):
        for j in range(board.get_size()):
            for k in range(board.get_size()):
                if board.get_spot_coord(j, k) == Player.FIRST:
                    self.assertEqual(fboard.get_q_features()[j, k, 0], 1)
                    self.assertEqual(fboard.get_q_features()[j, k, 1], 0)
                elif board.get_spot_coord(j, k) == Player.SECOND:
                    self.assertEqual(fboard.get_q_features()[j, k, 1], 1)
                else:
                    self.assertEqual(fboard.get_q_features()[j, k, 0], 0)
                    self.assertEqual(fboard.get_q_features()[j, k, 1], 0)

    def test_board_equivalence(self):
        size = 9
        cache = BitBoardCache("../cache/9-magics", size=9, win_chain_length=5, force_build_win_checks=False)
        bitboard = BitBoard(cache, size=9, win_chain_length=5)

        normal_board = Board(size=9, win_chain_length=5)

        fboard_1 = FeatureBoard_v1_1(bitboard)
        fboard_2 = FeatureBoard_v1_1(normal_board)

        for i in range(1000):
            if np.random.rand() < 0.5:
                normal_board.make_random_move()
                bitboard.move(normal_board.get_last_move())
                if normal_board.game_over():
                    break
                fboard_1.move(normal_board.get_last_move())
                fboard_2.move(normal_board.get_last_move())
            elif normal_board.get_last_move():
                normal_board.unmove()
                bitboard.unmove()
                fboard_1.unmove()
                fboard_2.unmove()
            self.verify_sync(normal_board, fboard_2)
            self.verify_sync(bitboard, fboard_1)

    def test_feature_board(self):
        size = 9
        cache = BitBoardCache("../cache/9-magics", size=9, win_chain_length=5, force_build_win_checks=False)
        board = BitBoard(cache, size=9, win_chain_length=5)

        fboard = FeatureBoard_v1_1(board)
        # the last player to move was the other player so it should be -1
        self.assertEqual(fboard.get_q_features()[0][0][3], -1)
        self.assertEqual(np.sum(fboard.get_p_features()[:, :, 2]), 0)
        board.make_random_move()
        last_move = board.get_last_move()
        fboard.move(last_move)
        self.assertEqual(fboard.get_q_features()[0][0][3], 1)
        self.assertEqual(np.sum(fboard.get_p_features()[:, :, 2]), 1)
        self.verify_sync(board, fboard)
        for i in range(20):
            board.make_random_move()
            last_move = board.get_last_move()
            fboard.move(last_move)
            self.assertEqual(np.sum(fboard.get_p_features()[:, :, 0]) + np.sum(fboard.get_p_features()[:, :, 1]), i + 2)
            self.verify_sync(board, fboard)

        for i in range(10):
            board.unmove()
            fboard.unmove()
            self.verify_sync(board, fboard)

        for i in range(1000):
            if np.random.rand() < 0.5:
                board.make_random_move()
                if board.game_over():
                    break
                last_move = board.get_last_move()
                fboard.move(last_move)
            elif board.get_last_move():
                board.unmove()
                fboard.unmove()
            self.verify_sync(board, fboard)

    def validate_rotation(self, gamestring):
        feature_set = FeatureSet_v1_1(gamestring)

        p_features, p_labels = feature_set.get_p()

        record = GameRecord.parse(gamestring)
        self.assertLessEqual(len(p_labels) / BoardTransform.NUM_ROTATIONS, (len(record.moves) / 2) + 1)

        trans = BoardTransform(size=9)

        for i in range(int(len(p_labels) / 8)):
            index = p_labels[i * 8]
            self.assertEqual(p_labels[i * 8: (i + 1) * 8], trans.get_rotated_points(index))

        for i in range(len(p_labels)):
            x, y = trans.index_to_coordinate(p_labels[i])
            # checking rotations are working by validating next_move loctaions
            self.assertEqual(p_features[i][x, y, 0] + p_features[i][x, y, 1], 0)

    def test_features_after_move_v1_1(self):
        size = 9
        cache = BitBoardCache("../cache/9-magics", size=9, win_chain_length=5, force_build_win_checks=False)
        board = BitBoard(cache, size=9, win_chain_length=5)

        moves = [76, 65, 58, 27, 40]
        for move in moves:
            board.move(move)

        tboard = ThoughtBoard(board, FeatureBoard_v1_1)
        q_features = tboard.get_q_features()
        x, y = board._transformer.index_to_coordinate(moves[-1])
        self.assertEqual(q_features[x, y, 2], 1)

        x, y = board._transformer.index_to_coordinate(moves[0])
        self.assertEqual(q_features[x, y, 0], 1)

        # p_features = tboard.get_p_features_after(PExpNodeV3(parent=None, move=None, is_maximizing=board.get_player_to_move() == Player.FIRST))
        p_features = tboard.get_p_features_after([])

        x, y = board._transformer.index_to_coordinate(moves[-1])
        # last move check
        self.assertEqual(p_features[x, y, 2], 1)
        self.assertEqual(np.sum(p_features[:, :, 3]), size ** 2)

    def test_rotation(self):
        gamestring_1 = '{"initial_state": {"size": "9", "win_chain_length": "5", "boardstring": "000000000020100000000000000000000000000002000010002000000000001000000000000000000", "player_to_move": "1"}, "moves": [59, 30, 40, 32, 23, 31, 33, 51, 21, 29, 28, 61, 71, 20, 48, 58, 34, 38, 47, 2, 11, 49, 0, 53, 52, 39, 37, 19, 9, 13, 18, 57, 64, 55, 56, 27, 72], "winning_player": 1, "q_assessments": [[-0.42047926783561707, -0.27915751934051514], [-0.16502320766448975, -0.602515459060669], [-0.45055916905403137, -0.3326343595981598], [-0.012478411197662354, -0.5165740251541138], [-0.5012242794036865, -0.23471033573150635], [-0.09695667028427124, -0.5550012588500977], [-0.6695745587348938, -0.5237785577774048], [-0.20509940385818481, -0.6204209327697754], [-0.6644445657730103, -0.6786763668060303], [-0.31529515981674194, -0.6252139806747437], [-0.6600759029388428, -0.5297435522079468], [-0.3306339979171753, -0.5300264358520508], [-0.6044123768806458, -0.3451654613018036], [-0.3083556890487671, -0.46383896470069885], [-0.6169118285179138, -0.4346025884151459], [-0.24419206380844116, -0.4125952422618866], [-0.5049172639846802, -0.33616673946380615], [-0.26773810386657715, -0.4608137309551239], [-0.6182757616043091, -0.42278173565864563], [-0.2608034610748291, -0.40805116295814514], [-0.4958721399307251, -0.26431113481521606], [-0.21211618185043335, -0.38622453808784485], [-0.49097567796707153, -0.38689103722572327], [-0.29656893014907837, -0.3982450067996979], [-0.5061854124069214, -0.29522737860679626], [-0.19089674949645996, -0.312770277261734], [-0.3866199851036072, -0.20948490500450134], [-0.12915736436843872, -0.27371785044670105], [-0.30733999609947205, -0.186032235622406], [-0.15766698122024536, -0.164814293384552], [-0.33021798729896545, -0.07221251726150513], [-0.16198641061782837, -0.13520735502243042], [-0.3360101282596588, 1.0], [-0.18188196420669556, -0.07597750425338745], [-0.3248758614063263, -0.0915951132774353], [-0.10910540819168091, -0.047596871852874756], [-0.19368615746498108, 1.0]]}'
        self.validate_rotation(gamestring_1)

    def test_full_parsing(self):
        gamestring_1 = '{"initial_state": {"size": "9", "win_chain_length": "5", "boardstring": "000000000020100000000000000000000000000002000010002000000000001000000000000000000", "player_to_move": "1"}, "moves": [59, 30, 40, 32, 23, 31, 33, 51, 21, 29, 28, 61, 71, 20, 48, 58, 34, 38, 47, 2, 11, 49, 0, 53, 52, 39, 37, 19, 9, 13, 18, 57, 64, 55, 56, 27, 72], "winning_player": 1, "q_assessments": [[-0.42047926783561707, -0.27915751934051514], [-0.16502320766448975, -0.602515459060669], [-0.45055916905403137, -0.3326343595981598], [-0.012478411197662354, -0.5165740251541138], [-0.5012242794036865, -0.23471033573150635], [-0.09695667028427124, -0.5550012588500977], [-0.6695745587348938, -0.5237785577774048], [-0.20509940385818481, -0.6204209327697754], [-0.6644445657730103, -0.6786763668060303], [-0.31529515981674194, -0.6252139806747437], [-0.6600759029388428, -0.5297435522079468], [-0.3306339979171753, -0.5300264358520508], [-0.6044123768806458, -0.3451654613018036], [-0.3083556890487671, -0.46383896470069885], [-0.6169118285179138, -0.4346025884151459], [-0.24419206380844116, -0.4125952422618866], [-0.5049172639846802, -0.33616673946380615], [-0.26773810386657715, -0.4608137309551239], [-0.6182757616043091, -0.42278173565864563], [-0.2608034610748291, -0.40805116295814514], [-0.4958721399307251, -0.26431113481521606], [-0.21211618185043335, -0.38622453808784485], [-0.49097567796707153, -0.38689103722572327], [-0.29656893014907837, -0.3982450067996979], [-0.5061854124069214, -0.29522737860679626], [-0.19089674949645996, -0.312770277261734], [-0.3866199851036072, -0.20948490500450134], [-0.12915736436843872, -0.27371785044670105], [-0.30733999609947205, -0.186032235622406], [-0.15766698122024536, -0.164814293384552], [-0.33021798729896545, -0.07221251726150513], [-0.16198641061782837, -0.13520735502243042], [-0.3360101282596588, 1.0], [-0.18188196420669556, -0.07597750425338745], [-0.3248758614063263, -0.0915951132774353], [-0.10910540819168091, -0.047596871852874756], [-0.19368615746498108, 1.0]]}'
        feature_set = FeatureSet_v1_1(gamestring_1)

        p_features, p_labels = feature_set.get_p()
        for feature_tensor in p_features:
            assert np.max(feature_tensor[:, :, 2]) == 1

    def test_empty_lastmove(self):
        gamestring = '{"initial_state": {"size": "9", "win_chain_length": "5", "boardstring": "000000000000000100000000000000020000000000000002000200000000000100001000000000000", "player_to_move": "1"}, "moves": [49, 41, 61, 30, 39, 29, 28, 21, 11, 33, 32, 42, 60, 58, 40, 37, 13, 12, 57, 50, 34, 66, 74, 24, 20, 43, 48, 56, 38, 45, 44, 69, 67, 18, 52, 76, 36, 26, 10, 46, 3, 25, 23, 19, 17, 14, 4, 9, 6, 5, 55, 53, 72, 73, 59, 22, 54, 7, 70, 62, 2, 64, 75, 8, 71, 78, 16, 79, 77, 27, 1, 0, 35, 65, 80], "winning_player": 1, "q_assessments": [[-0.32095736265182495, -0.37630361318588257], [-0.12770086526870728, -0.695160984992981], [-0.6579201817512512, -0.8476955890655518], [-0.3432961106300354, -0.701379656791687], [-0.6849155426025391, -0.5274210572242737], [-0.26211637258529663, -0.8444123268127441], [-0.7010810971260071, -0.9962059259414673], [-0.37682217359542847, -0.985783576965332], [-0.8294357657432556, -0.9998999834060669], [-0.46317631006240845, -0.7061704397201538], [-0.7545111775398254, -0.7031635046005249], [-0.36292415857315063, -0.7225069999694824], [-0.7843830585479736, -0.5687986612319946], [-0.40804392099380493, -0.5460824370384216], [-0.6678813099861145, -0.5499799251556396], [-0.2162308692932129, -0.37363678216934204], [-0.5429981350898743, -0.33793094754219055], [-0.23533034324645996, -0.34306254982948303], [-0.4358941316604614, -0.2891818583011627], [-0.22141659259796143, -0.3072952628135681], [-0.3811424970626831, -0.37698128819465637], [-0.3026065230369568, -0.3426515758037567], [-0.3687663674354553, -0.30883437395095825], [-0.3112758994102478, -0.3029346764087677], [-0.39023977518081665, -0.22519877552986145], [-0.2810778021812439, -0.32022956013679504], [-0.36647629737854004, -0.25221413373947144], [-0.22764962911605835, -0.2198576033115387], [-0.2849279046058655, -0.20671620965003967], [-0.21064621210098267, -0.18986397981643677], [-0.2145216464996338, -0.15428391098976135], [-0.1654227375984192, -0.15022936463356018], [-0.19213414192199707, -0.0916016697883606], [-0.1204727292060852, -0.12485766410827637], [-0.17789119482040405, -0.06009894609451294], [-0.08595412969589233, -0.10422569513320923], [-0.15506041049957275, -0.12804973125457764], [-0.09745103120803833, -0.12606021761894226], [-0.13569530844688416, -0.10547572374343872], [-0.08170932531356812, -0.094882071018219], [-0.11108982563018799, -0.09350648522377014], [-0.08712881803512573, -0.10458570718765259], [-0.11183574795722961, -0.08321577310562134], [-0.09472137689590454, -0.0927467942237854], [-0.06981724500656128, -0.07074058055877686], [-0.0913580060005188, -0.08488991856575012], [-0.06021794676780701, -0.06291279196739197], [-0.08229702711105347, -0.0879959762096405], [-0.08384126424789429, -0.03808629512786865], [-0.1081039309501648, -0.10202223062515259], [-0.07836481928825378, -0.07157397270202637], [-0.1134447455406189, -0.11408859491348267], [-0.053479552268981934, -0.0566943883895874], [-0.12260192632675171, -0.12416261434555054], [-0.05942195653915405, -0.04664641618728638], [-0.12107044458389282, -0.12847715616226196], [-0.04993024468421936, -0.0328022837638855], [-0.11997205018997192, -0.12416166067123413], [-0.03332608938217163, 0.009372025728225708], [-0.12974673509597778, -0.13272374868392944], [-0.02755334973335266, 0.0038152337074279785], [-0.1335039734840393, -0.12646108865737915], [0.011429905891418457, 0.05308443307876587], [-0.12282556295394897, -0.12042385339736938], [0.03166261315345764, 0.05980813503265381], [-0.12346011400222778, -0.1240888237953186], [0.014762789011001587, 0.05175033211708069], [-0.11889630556106567, -0.13015061616897583], [0.02467358112335205, 0.06956794857978821], [-0.11846750974655151, 0.04805999994277954], [0.040641456842422485, 1.0], [-0.11670118570327759, 1.0], [0.05679860711097717, 1.0], [-0.11497324705123901, 1.0], [0.08041432499885559, 1.0]]}'
        feature_set = FeatureSet_v1_1(gamestring)

        p_features, p_labels = feature_set.get_p()
        for feature_tensor in p_features:
            pass

    def test_features_of_win(self):
        gamestring = '{"initial_state": {"size": "9", "win_chain_length": "5", "boardstring": "000000100000000000000001102000002000000000000000000000000000000020000000000000000", "player_to_move": "1"}, "moves": [22, 21, 40, 31, 42, 33, 30, 34, 35, 41, 38, 14, 54, 46, 51, 49, 57, 11, 1, 55, 37, 39, 47, 25, 17, 67, 50, 60, 20, 10, 56, 29, 74, 65, 66, 13, 58], "winning_player": 1, "q_assessments": [[0.1668100208044052, 0.33525359630584717], [0.3994003236293793, 0.24215756356716156], [0.2018590271472931, 0.29990068078041077], [0.4258742928504944, 0.11599751561880112], [0.017245644703507423, 0.16036012768745422], [0.21906672418117523, 0.015978770330548286], [0.04823630675673485, -0.08495990931987762], [0.3290388882160187, 0.03167437016963959], [0.21332506835460663, 0.0354134738445282], [0.2644520699977875, 0.0908007100224495], [-0.14151248335838318, 0.05539955943822861], [0.03722734749317169, 0.12088491767644882], [-0.04074528440833092, 0.016778597608208656], [-0.09393633157014847, -0.12253795564174652], [-0.09829752892255783, -0.16916722059249878], [0.003931361250579357, -0.20802094042301178], [-0.15619787573814392, -0.25911909341812134], [-0.097310870885849, -0.2324538677930832], [-0.07086139172315598, -0.17062552273273468], [-0.11676185578107834, -0.23419712483882904], [-0.07421347498893738, -0.1337175816297531], [-0.06327033042907715, -0.17107190191745758], [-0.06181388348340988, -0.11561759561300278], [-0.09483533352613449, -0.13382649421691895], [-0.03963194042444229, -0.07954724878072739], [-0.15681573748588562, -0.13869509100914001], [-0.10265619307756424, 0.02845008485019207], [-0.12955132126808167, -0.09671367704868317], [-0.023986704647541046, 0.0766296461224556], [-0.12735527753829956, -0.10607543587684631], [-0.019179100170731544, 0.000446834514150396], [-0.12955188751220703, -0.0977582260966301], [0.009337697178125381, -0.05667382851243019], [-0.15969929099082947, -0.15699654817581177], [-0.024815162643790245, -0.0809166207909584], [-0.16441792249679565, -0.201398104429245], [-0.05777398869395256, 1.0]]}'

        game_record = GameRecord.parse(gamestring)
        feature_set = FeatureSet_v1_1(gamestring)

        p_features, p_labels = feature_set.get_p()
        q_features, q_labels = feature_set.get_q()
        self.assertEqual(p_labels[0], game_record.get_moves()[0])
        # next move is 8 rotations later
        self.assertEqual(p_labels[8], game_record.get_moves()[2])
        self.assertEqual(len(p_features), (len(game_record.get_moves()) + 1) * 8 / 2)

    def test_features_of_draw(self):
        gamestring = '{"initial_state": {"size": "9", "win_chain_length": "5", "boardstring": "000010000002000000000000002000000000000000000000000000000000010000000020000010000", "player_to_move": "1"}, "moves": \
                        [49, 40, 50, 29, 51, 52, 47, 48, 41, 31, 32, 23, 39, 68, 42, 58, 38, 33, 65, 56, 57, 73, 67, 37, 64, 66, 43, 59, 21, 22, 13, 25, 24, 44, 30, 16, 3, 12, 2, 1, 5, 6, 14, 17, 35, 7, 71, 28, 19, 34, 60, 78, 77, 62, 46, 54, 55, 36, 20, 45, 63, 18, 27, 53, 15, 9, 0, 69, 10, 75, 74, 8, 79, 72, 80], "winning_player": 2, "q_assessments": [[0.1441378891468048, 0.018954753875732422], [0.1740971952676773, 0.049366191029548645], [0.0335845984518528, 0.003995316103100777], [0.1990884244441986, -0.03526832535862923], [0.1518261879682541, 0.14679932594299316], [0.30081960558891296, 0.1850322186946869], [0.2411692887544632, 0.42676055431365967], [0.32099518179893494, 1.0], [0.037879668176174164, 0.46904683113098145], [0.3514479100704193, 0.32773667573928833], [0.06874430179595947, 0.21076393127441406], [0.19079069793224335, 0.19416023790836334], [0.03690280020236969, 0.22769373655319214], [0.16109241545200348, 0.030776292085647583], [0.02393667958676815, 0.10433723032474518], [0.20881935954093933, -0.058923427015542984], [-0.032382119446992874, -0.0391739197075367], [0.08658048510551453, -0.004702226258814335], [-0.048403363674879074, -0.02257576398551464], [0.030211197212338448, 0.002399328863248229], [-0.09645375609397888, -0.018893815577030182], [0.04795060679316521, -0.036825407296419144], [0.010310768149793148, -0.039448391646146774], [0.08373696357011795, -0.0922875702381134], [-0.02795395813882351, -0.058756206184625626], [-0.012790181674063206, -0.12844052910804749], [-0.0748232826590538, -0.03512553870677948], [0.05866406857967377, -0.07655677199363708], [-0.07870101928710938, -0.061948493123054504], [-0.05012039467692375, -0.08961450308561325], [-0.08758111298084259, -0.09545144438743591], [-0.0772932767868042, -0.09808807820081711], [-0.054063763469457626, -0.07712806761264801], [-0.07793064415454865, -0.09154502302408218], [-0.06810098886489868, -0.09790285676717758], [-0.09138093888759613, -0.09173014014959335], [-0.0652037188410759, -0.05285193398594856], [-0.09469824284315109, 0.02259567752480507], [-0.06675492227077484, 0.008916418068110943], [-0.09791086614131927, -0.014863548800349236], [-0.03248143568634987, 0.0006500267190858722], [-0.09915879368782043, -0.0031376886181533337], [-0.0015664896927773952, -0.05323910713195801], [-0.09743919223546982, -0.10276063531637192], [-0.01101260632276535, -0.060694240033626556], [-0.09833744913339615, -0.09386873245239258], [0.010037926957011223, -0.028646189719438553], [-0.09800463169813156, -0.05059019476175308], [-0.0039429073221981525, -0.019136110320687294], [-0.09943518787622452, -0.09996098279953003], [0.030197681859135628, -0.09802275151014328], [-0.09830448031425476, -0.09958526492118835], [0.008892429061233997, 0.030169421806931496], [-0.10022575408220291, -0.1003701388835907], [0.03512260690331459, 0.015467638149857521], [-0.10247761011123657, -0.10819592326879501], [0.035772912204265594, 0.018841903656721115], [-0.10215830057859421, -0.10900743305683136], [-0.0012842920841649175, -0.006419710349291563], [-0.11106152832508087, -0.13857348263263702], [-0.02204560674726963, -0.03621893748641014], [-0.11783379316329956, -0.15427090227603912], [-0.014542915858328342, 0.0008236847934313118], [-0.12672695517539978, -0.15676221251487732], [-0.01892387494444847, 0.03092864342033863], [-0.1438019722700119, -0.14628702402114868], [-0.005204353481531143, 0.037651438266038895], [-0.15390576422214508, 0.019929489120841026], [-0.01329831313341856, 0.024800999090075493], [-0.15790222585201263, 0.01567954011261463], [-0.003457225626334548, 0.01335381343960762], [-0.16395698487758636, 0.017335353419184685], [0.024885617196559906, 0.04818567633628845], [-0.16866005957126617, -1.0], [0.04859616234898567, -1.0]]}'

        game_record = GameRecord.parse(gamestring)
        feature_set = FeatureSet_v1_1(gamestring)

        p_features, p_labels = feature_set.get_p()
        q_features, q_labels = feature_set.get_q()
        self.assertEqual(p_labels[0], game_record.get_moves()[0])
        # next move is 8 rotations later
        self.assertEqual(p_labels[8], game_record.get_moves()[1])
        self.assertEqual(len(p_features), len(game_record.get_moves()) * 8)


if __name__ == '__main__':
    unittest.main()
